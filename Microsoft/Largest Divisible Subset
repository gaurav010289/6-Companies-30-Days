class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size(),mx = -1e9,ind = 0;
        vector<int> dp(n,1),hash(n);
        for(int i = 0;i<n;i++){
            hash[i] = i;
            for(int j = 0;j<i;j++){
                if(nums[i]%nums[j] == 0 && dp[i] < 1 + dp[j]){
                    dp[i] = 1 + dp[j];
                    hash[i] = j;
                }
            }
            if(dp[i] > mx){
                mx = dp[i];
                ind = i;
            }
        }
        vector<int> ans;
        ans.push_back(nums[ind]);
        while(hash[ind] != ind){
            ind = hash[ind];
            ans.push_back(nums[ind]);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
